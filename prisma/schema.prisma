// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id          Int         @id @default(autoincrement())
    title       String      @db.Text
    subtitle    String?     @db.Text
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    body        String      @db.Text
    createdBy   User        @relation(fields: [createdById], references: [id])
    createdById String
    references  Reference[]
    comments    Comment[]
    likes       Like[]
    responses   Post[]      @relation("ReplyToPost")
    Post        Post?       @relation("ReplyToPost", fields: [postId], references: [id])
    postId      Int?
    tags        PostTags[]

    @@index([title])
}

model PostTags {
    id     Int  @id @default(autoincrement())
    postId Int
    tagId  Int
    post   Post @relation(fields: [postId], references: [id])
    tag    Tag  @relation(fields: [tagId], references: [id])

    @@unique([postId, tagId])
}

model Comment {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    body      String    @db.Text
    postId    Int
    post      Post      @relation(fields: [postId], references: [id])
    replies   Comment[] @relation("ReplyToComment")
    Comment   Comment?  @relation("ReplyToComment", fields: [commentId], references: [id])
    commentId Int?
}

model Tag {
    id        Int        @id @default(autoincrement())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    name      String     @unique
    posts     PostTags[]
}

model Like {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    postId    Int
    userId    String
    post      Post     @relation(fields: [postId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
}

model Reference {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    display   String
    url       String
    postId    Int
    post      Post     @relation(fields: [postId], references: [id])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    followers     Follower[]
    following     Following[]
    likes         Like[]
}

model Follower {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    follower   User     @relation(fields: [followerId], references: [id])
    followerId String

    @@unique([followerId])
}

model Following {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    following   User     @relation(fields: [followingId], references: [id])
    followingId String

    @@unique([followingId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
